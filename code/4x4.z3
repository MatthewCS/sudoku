; Code generated by a Python script on 01/22/2021, 03:12:54

; Variable naming scheme: <VALUE>_<COLUMN>x<ROW>
; Declare values:
(declare-const v1_1x1 Bool)
(declare-const v2_1x1 Bool)
(declare-const v3_1x1 Bool)
(declare-const v4_1x1 Bool)
(declare-const v1_2x1 Bool)
(declare-const v2_2x1 Bool)
(declare-const v3_2x1 Bool)
(declare-const v4_2x1 Bool)
(declare-const v1_3x1 Bool)
(declare-const v2_3x1 Bool)
(declare-const v3_3x1 Bool)
(declare-const v4_3x1 Bool)
(declare-const v1_4x1 Bool)
(declare-const v2_4x1 Bool)
(declare-const v3_4x1 Bool)
(declare-const v4_4x1 Bool)
(declare-const v1_1x2 Bool)
(declare-const v2_1x2 Bool)
(declare-const v3_1x2 Bool)
(declare-const v4_1x2 Bool)
(declare-const v1_2x2 Bool)
(declare-const v2_2x2 Bool)
(declare-const v3_2x2 Bool)
(declare-const v4_2x2 Bool)
(declare-const v1_3x2 Bool)
(declare-const v2_3x2 Bool)
(declare-const v3_3x2 Bool)
(declare-const v4_3x2 Bool)
(declare-const v1_4x2 Bool)
(declare-const v2_4x2 Bool)
(declare-const v3_4x2 Bool)
(declare-const v4_4x2 Bool)
(declare-const v1_1x3 Bool)
(declare-const v2_1x3 Bool)
(declare-const v3_1x3 Bool)
(declare-const v4_1x3 Bool)
(declare-const v1_2x3 Bool)
(declare-const v2_2x3 Bool)
(declare-const v3_2x3 Bool)
(declare-const v4_2x3 Bool)
(declare-const v1_3x3 Bool)
(declare-const v2_3x3 Bool)
(declare-const v3_3x3 Bool)
(declare-const v4_3x3 Bool)
(declare-const v1_4x3 Bool)
(declare-const v2_4x3 Bool)
(declare-const v3_4x3 Bool)
(declare-const v4_4x3 Bool)
(declare-const v1_1x4 Bool)
(declare-const v2_1x4 Bool)
(declare-const v3_1x4 Bool)
(declare-const v4_1x4 Bool)
(declare-const v1_2x4 Bool)
(declare-const v2_2x4 Bool)
(declare-const v3_2x4 Bool)
(declare-const v4_2x4 Bool)
(declare-const v1_3x4 Bool)
(declare-const v2_3x4 Bool)
(declare-const v3_3x4 Bool)
(declare-const v4_3x4 Bool)
(declare-const v1_4x4 Bool)
(declare-const v2_4x4 Bool)
(declare-const v3_4x4 Bool)
(declare-const v4_4x4 Bool)

; Known cell values
(assert (= v1_2x1 true))
(assert (= v3_3x1 true))
(assert (= v2_1x2 true))
(assert (= v3_4x3 true))
(assert (= v2_2x4 true))
(assert (= v1_3x4 true))
(assert (= v4_4x4 true))

; Logic
; Using xor statements --- one column can have one value,
;   one row can have one value, and one cell can have one
;   value.

; A cell can only hold one value.
; 
; Here, we tell z3 to only hold one value in a cell
; and that a cell must hold one value.

; Values for cell 1 x 1
(assert
  (=> (= v1_1x1 true)
    (and
      (= v2_1x1 false)
      (= v3_1x1 false)
      (= v4_1x1 false)
    )
  )
)
(assert
  (=> (= v2_1x1 true)
    (and
      (= v1_1x1 false)
      (= v3_1x1 false)
      (= v4_1x1 false)
    )
  )
)
(assert
  (=> (= v3_1x1 true)
    (and
      (= v1_1x1 false)
      (= v2_1x1 false)
      (= v4_1x1 false)
    )
  )
)
(assert
  (=> (= v4_1x1 true)
    (and
      (= v1_1x1 false)
      (= v2_1x1 false)
      (= v3_1x1 false)
    )
  )
)
(assert
  (xor
    v1_1x1 v2_1x1 v3_1x1 v4_1x1
  )
)

; Values for cell 1 x 2
(assert
  (=> (= v1_1x2 true)
    (and
      (= v2_1x2 false)
      (= v3_1x2 false)
      (= v4_1x2 false)
    )
  )
)
(assert
  (=> (= v2_1x2 true)
    (and
      (= v1_1x2 false)
      (= v3_1x2 false)
      (= v4_1x2 false)
    )
  )
)
(assert
  (=> (= v3_1x2 true)
    (and
      (= v1_1x2 false)
      (= v2_1x2 false)
      (= v4_1x2 false)
    )
  )
)
(assert
  (=> (= v4_1x2 true)
    (and
      (= v1_1x2 false)
      (= v2_1x2 false)
      (= v3_1x2 false)
    )
  )
)
(assert
  (xor
    v1_1x2 v2_1x2 v3_1x2 v4_1x2
  )
)

; Values for cell 1 x 3
(assert
  (=> (= v1_1x3 true)
    (and
      (= v2_1x3 false)
      (= v3_1x3 false)
      (= v4_1x3 false)
    )
  )
)
(assert
  (=> (= v2_1x3 true)
    (and
      (= v1_1x3 false)
      (= v3_1x3 false)
      (= v4_1x3 false)
    )
  )
)
(assert
  (=> (= v3_1x3 true)
    (and
      (= v1_1x3 false)
      (= v2_1x3 false)
      (= v4_1x3 false)
    )
  )
)
(assert
  (=> (= v4_1x3 true)
    (and
      (= v1_1x3 false)
      (= v2_1x3 false)
      (= v3_1x3 false)
    )
  )
)
(assert
  (xor
    v1_1x3 v2_1x3 v3_1x3 v4_1x3
  )
)

; Values for cell 1 x 4
(assert
  (=> (= v1_1x4 true)
    (and
      (= v2_1x4 false)
      (= v3_1x4 false)
      (= v4_1x4 false)
    )
  )
)
(assert
  (=> (= v2_1x4 true)
    (and
      (= v1_1x4 false)
      (= v3_1x4 false)
      (= v4_1x4 false)
    )
  )
)
(assert
  (=> (= v3_1x4 true)
    (and
      (= v1_1x4 false)
      (= v2_1x4 false)
      (= v4_1x4 false)
    )
  )
)
(assert
  (=> (= v4_1x4 true)
    (and
      (= v1_1x4 false)
      (= v2_1x4 false)
      (= v3_1x4 false)
    )
  )
)
(assert
  (xor
    v1_1x4 v2_1x4 v3_1x4 v4_1x4
  )
)

; Values for cell 2 x 1
(assert
  (=> (= v1_2x1 true)
    (and
      (= v2_2x1 false)
      (= v3_2x1 false)
      (= v4_2x1 false)
    )
  )
)
(assert
  (=> (= v2_2x1 true)
    (and
      (= v1_2x1 false)
      (= v3_2x1 false)
      (= v4_2x1 false)
    )
  )
)
(assert
  (=> (= v3_2x1 true)
    (and
      (= v1_2x1 false)
      (= v2_2x1 false)
      (= v4_2x1 false)
    )
  )
)
(assert
  (=> (= v4_2x1 true)
    (and
      (= v1_2x1 false)
      (= v2_2x1 false)
      (= v3_2x1 false)
    )
  )
)
(assert
  (xor
    v1_2x1 v2_2x1 v3_2x1 v4_2x1
  )
)

; Values for cell 2 x 2
(assert
  (=> (= v1_2x2 true)
    (and
      (= v2_2x2 false)
      (= v3_2x2 false)
      (= v4_2x2 false)
    )
  )
)
(assert
  (=> (= v2_2x2 true)
    (and
      (= v1_2x2 false)
      (= v3_2x2 false)
      (= v4_2x2 false)
    )
  )
)
(assert
  (=> (= v3_2x2 true)
    (and
      (= v1_2x2 false)
      (= v2_2x2 false)
      (= v4_2x2 false)
    )
  )
)
(assert
  (=> (= v4_2x2 true)
    (and
      (= v1_2x2 false)
      (= v2_2x2 false)
      (= v3_2x2 false)
    )
  )
)
(assert
  (xor
    v1_2x2 v2_2x2 v3_2x2 v4_2x2
  )
)

; Values for cell 2 x 3
(assert
  (=> (= v1_2x3 true)
    (and
      (= v2_2x3 false)
      (= v3_2x3 false)
      (= v4_2x3 false)
    )
  )
)
(assert
  (=> (= v2_2x3 true)
    (and
      (= v1_2x3 false)
      (= v3_2x3 false)
      (= v4_2x3 false)
    )
  )
)
(assert
  (=> (= v3_2x3 true)
    (and
      (= v1_2x3 false)
      (= v2_2x3 false)
      (= v4_2x3 false)
    )
  )
)
(assert
  (=> (= v4_2x3 true)
    (and
      (= v1_2x3 false)
      (= v2_2x3 false)
      (= v3_2x3 false)
    )
  )
)
(assert
  (xor
    v1_2x3 v2_2x3 v3_2x3 v4_2x3
  )
)

; Values for cell 2 x 4
(assert
  (=> (= v1_2x4 true)
    (and
      (= v2_2x4 false)
      (= v3_2x4 false)
      (= v4_2x4 false)
    )
  )
)
(assert
  (=> (= v2_2x4 true)
    (and
      (= v1_2x4 false)
      (= v3_2x4 false)
      (= v4_2x4 false)
    )
  )
)
(assert
  (=> (= v3_2x4 true)
    (and
      (= v1_2x4 false)
      (= v2_2x4 false)
      (= v4_2x4 false)
    )
  )
)
(assert
  (=> (= v4_2x4 true)
    (and
      (= v1_2x4 false)
      (= v2_2x4 false)
      (= v3_2x4 false)
    )
  )
)
(assert
  (xor
    v1_2x4 v2_2x4 v3_2x4 v4_2x4
  )
)

; Values for cell 3 x 1
(assert
  (=> (= v1_3x1 true)
    (and
      (= v2_3x1 false)
      (= v3_3x1 false)
      (= v4_3x1 false)
    )
  )
)
(assert
  (=> (= v2_3x1 true)
    (and
      (= v1_3x1 false)
      (= v3_3x1 false)
      (= v4_3x1 false)
    )
  )
)
(assert
  (=> (= v3_3x1 true)
    (and
      (= v1_3x1 false)
      (= v2_3x1 false)
      (= v4_3x1 false)
    )
  )
)
(assert
  (=> (= v4_3x1 true)
    (and
      (= v1_3x1 false)
      (= v2_3x1 false)
      (= v3_3x1 false)
    )
  )
)
(assert
  (xor
    v1_3x1 v2_3x1 v3_3x1 v4_3x1
  )
)

; Values for cell 3 x 2
(assert
  (=> (= v1_3x2 true)
    (and
      (= v2_3x2 false)
      (= v3_3x2 false)
      (= v4_3x2 false)
    )
  )
)
(assert
  (=> (= v2_3x2 true)
    (and
      (= v1_3x2 false)
      (= v3_3x2 false)
      (= v4_3x2 false)
    )
  )
)
(assert
  (=> (= v3_3x2 true)
    (and
      (= v1_3x2 false)
      (= v2_3x2 false)
      (= v4_3x2 false)
    )
  )
)
(assert
  (=> (= v4_3x2 true)
    (and
      (= v1_3x2 false)
      (= v2_3x2 false)
      (= v3_3x2 false)
    )
  )
)
(assert
  (xor
    v1_3x2 v2_3x2 v3_3x2 v4_3x2
  )
)

; Values for cell 3 x 3
(assert
  (=> (= v1_3x3 true)
    (and
      (= v2_3x3 false)
      (= v3_3x3 false)
      (= v4_3x3 false)
    )
  )
)
(assert
  (=> (= v2_3x3 true)
    (and
      (= v1_3x3 false)
      (= v3_3x3 false)
      (= v4_3x3 false)
    )
  )
)
(assert
  (=> (= v3_3x3 true)
    (and
      (= v1_3x3 false)
      (= v2_3x3 false)
      (= v4_3x3 false)
    )
  )
)
(assert
  (=> (= v4_3x3 true)
    (and
      (= v1_3x3 false)
      (= v2_3x3 false)
      (= v3_3x3 false)
    )
  )
)
(assert
  (xor
    v1_3x3 v2_3x3 v3_3x3 v4_3x3
  )
)

; Values for cell 3 x 4
(assert
  (=> (= v1_3x4 true)
    (and
      (= v2_3x4 false)
      (= v3_3x4 false)
      (= v4_3x4 false)
    )
  )
)
(assert
  (=> (= v2_3x4 true)
    (and
      (= v1_3x4 false)
      (= v3_3x4 false)
      (= v4_3x4 false)
    )
  )
)
(assert
  (=> (= v3_3x4 true)
    (and
      (= v1_3x4 false)
      (= v2_3x4 false)
      (= v4_3x4 false)
    )
  )
)
(assert
  (=> (= v4_3x4 true)
    (and
      (= v1_3x4 false)
      (= v2_3x4 false)
      (= v3_3x4 false)
    )
  )
)
(assert
  (xor
    v1_3x4 v2_3x4 v3_3x4 v4_3x4
  )
)

; Values for cell 4 x 1
(assert
  (=> (= v1_4x1 true)
    (and
      (= v2_4x1 false)
      (= v3_4x1 false)
      (= v4_4x1 false)
    )
  )
)
(assert
  (=> (= v2_4x1 true)
    (and
      (= v1_4x1 false)
      (= v3_4x1 false)
      (= v4_4x1 false)
    )
  )
)
(assert
  (=> (= v3_4x1 true)
    (and
      (= v1_4x1 false)
      (= v2_4x1 false)
      (= v4_4x1 false)
    )
  )
)
(assert
  (=> (= v4_4x1 true)
    (and
      (= v1_4x1 false)
      (= v2_4x1 false)
      (= v3_4x1 false)
    )
  )
)
(assert
  (xor
    v1_4x1 v2_4x1 v3_4x1 v4_4x1
  )
)

; Values for cell 4 x 2
(assert
  (=> (= v1_4x2 true)
    (and
      (= v2_4x2 false)
      (= v3_4x2 false)
      (= v4_4x2 false)
    )
  )
)
(assert
  (=> (= v2_4x2 true)
    (and
      (= v1_4x2 false)
      (= v3_4x2 false)
      (= v4_4x2 false)
    )
  )
)
(assert
  (=> (= v3_4x2 true)
    (and
      (= v1_4x2 false)
      (= v2_4x2 false)
      (= v4_4x2 false)
    )
  )
)
(assert
  (=> (= v4_4x2 true)
    (and
      (= v1_4x2 false)
      (= v2_4x2 false)
      (= v3_4x2 false)
    )
  )
)
(assert
  (xor
    v1_4x2 v2_4x2 v3_4x2 v4_4x2
  )
)

; Values for cell 4 x 3
(assert
  (=> (= v1_4x3 true)
    (and
      (= v2_4x3 false)
      (= v3_4x3 false)
      (= v4_4x3 false)
    )
  )
)
(assert
  (=> (= v2_4x3 true)
    (and
      (= v1_4x3 false)
      (= v3_4x3 false)
      (= v4_4x3 false)
    )
  )
)
(assert
  (=> (= v3_4x3 true)
    (and
      (= v1_4x3 false)
      (= v2_4x3 false)
      (= v4_4x3 false)
    )
  )
)
(assert
  (=> (= v4_4x3 true)
    (and
      (= v1_4x3 false)
      (= v2_4x3 false)
      (= v3_4x3 false)
    )
  )
)
(assert
  (xor
    v1_4x3 v2_4x3 v3_4x3 v4_4x3
  )
)

; Values for cell 4 x 4
(assert
  (=> (= v1_4x4 true)
    (and
      (= v2_4x4 false)
      (= v3_4x4 false)
      (= v4_4x4 false)
    )
  )
)
(assert
  (=> (= v2_4x4 true)
    (and
      (= v1_4x4 false)
      (= v3_4x4 false)
      (= v4_4x4 false)
    )
  )
)
(assert
  (=> (= v3_4x4 true)
    (and
      (= v1_4x4 false)
      (= v2_4x4 false)
      (= v4_4x4 false)
    )
  )
)
(assert
  (=> (= v4_4x4 true)
    (and
      (= v1_4x4 false)
      (= v2_4x4 false)
      (= v3_4x4 false)
    )
  )
)
(assert
  (xor
    v1_4x4 v2_4x4 v3_4x4 v4_4x4
  )
)


; Here, we tell z3 that each row and each column
; must have only one instance of each value.

; Row 1
(assert 
  (xor
    v1_1x1 v1_1x2 v1_1x3 v1_1x4
  )
)
; Column 1
(assert 
  (xor
    v1_1x1 v1_2x1 v1_3x1 v1_4x1
  )
)
; Rows, columns only have one instance of value 1
; Rows for v1_1x1
(assert
  (=> (= v1_1x1 true)
    (and
      (= v1_1x2 false)
      (= v1_1x3 false)
      (= v1_1x4 false)
    )
  )
)
; Columns for v1_1x1
(assert
  (=> (= v1_1x1 true)
    (and
      (= v1_2x1 false)
      (= v1_3x1 false)
      (= v1_4x1 false)
    )
  )
)

; Rows for v1_1x2
(assert
  (=> (= v1_1x2 true)
    (and
      (= v1_1x1 false)
      (= v1_1x3 false)
      (= v1_1x4 false)
    )
  )
)
; Columns for v1_2x1
(assert
  (=> (= v1_2x1 true)
    (and
      (= v1_1x1 false)
      (= v1_3x1 false)
      (= v1_4x1 false)
    )
  )
)

; Rows for v1_1x3
(assert
  (=> (= v1_1x3 true)
    (and
      (= v1_1x1 false)
      (= v1_1x2 false)
      (= v1_1x4 false)
    )
  )
)
; Columns for v1_3x1
(assert
  (=> (= v1_3x1 true)
    (and
      (= v1_1x1 false)
      (= v1_2x1 false)
      (= v1_4x1 false)
    )
  )
)

; Rows for v1_1x4
(assert
  (=> (= v1_1x4 true)
    (and
      (= v1_1x1 false)
      (= v1_1x2 false)
      (= v1_1x3 false)
    )
  )
)
; Columns for v1_4x1
(assert
  (=> (= v1_4x1 true)
    (and
      (= v1_1x1 false)
      (= v1_2x1 false)
      (= v1_3x1 false)
    )
  )
)

; Row 2
(assert 
  (xor
    v1_2x1 v1_2x2 v1_2x3 v1_2x4
  )
)
; Column 2
(assert 
  (xor
    v1_1x2 v1_2x2 v1_3x2 v1_4x2
  )
)
; Rows, columns only have one instance of value 1
; Rows for v1_2x1
(assert
  (=> (= v1_2x1 true)
    (and
      (= v1_2x2 false)
      (= v1_2x3 false)
      (= v1_2x4 false)
    )
  )
)
; Columns for v1_1x2
(assert
  (=> (= v1_1x2 true)
    (and
      (= v1_2x2 false)
      (= v1_3x2 false)
      (= v1_4x2 false)
    )
  )
)

; Rows for v1_2x2
(assert
  (=> (= v1_2x2 true)
    (and
      (= v1_2x1 false)
      (= v1_2x3 false)
      (= v1_2x4 false)
    )
  )
)
; Columns for v1_2x2
(assert
  (=> (= v1_2x2 true)
    (and
      (= v1_1x2 false)
      (= v1_3x2 false)
      (= v1_4x2 false)
    )
  )
)

; Rows for v1_2x3
(assert
  (=> (= v1_2x3 true)
    (and
      (= v1_2x1 false)
      (= v1_2x2 false)
      (= v1_2x4 false)
    )
  )
)
; Columns for v1_3x2
(assert
  (=> (= v1_3x2 true)
    (and
      (= v1_1x2 false)
      (= v1_2x2 false)
      (= v1_4x2 false)
    )
  )
)

; Rows for v1_2x4
(assert
  (=> (= v1_2x4 true)
    (and
      (= v1_2x1 false)
      (= v1_2x2 false)
      (= v1_2x3 false)
    )
  )
)
; Columns for v1_4x2
(assert
  (=> (= v1_4x2 true)
    (and
      (= v1_1x2 false)
      (= v1_2x2 false)
      (= v1_3x2 false)
    )
  )
)

; Row 3
(assert 
  (xor
    v1_3x1 v1_3x2 v1_3x3 v1_3x4
  )
)
; Column 3
(assert 
  (xor
    v1_1x3 v1_2x3 v1_3x3 v1_4x3
  )
)
; Rows, columns only have one instance of value 1
; Rows for v1_3x1
(assert
  (=> (= v1_3x1 true)
    (and
      (= v1_3x2 false)
      (= v1_3x3 false)
      (= v1_3x4 false)
    )
  )
)
; Columns for v1_1x3
(assert
  (=> (= v1_1x3 true)
    (and
      (= v1_2x3 false)
      (= v1_3x3 false)
      (= v1_4x3 false)
    )
  )
)

; Rows for v1_3x2
(assert
  (=> (= v1_3x2 true)
    (and
      (= v1_3x1 false)
      (= v1_3x3 false)
      (= v1_3x4 false)
    )
  )
)
; Columns for v1_2x3
(assert
  (=> (= v1_2x3 true)
    (and
      (= v1_1x3 false)
      (= v1_3x3 false)
      (= v1_4x3 false)
    )
  )
)

; Rows for v1_3x3
(assert
  (=> (= v1_3x3 true)
    (and
      (= v1_3x1 false)
      (= v1_3x2 false)
      (= v1_3x4 false)
    )
  )
)
; Columns for v1_3x3
(assert
  (=> (= v1_3x3 true)
    (and
      (= v1_1x3 false)
      (= v1_2x3 false)
      (= v1_4x3 false)
    )
  )
)

; Rows for v1_3x4
(assert
  (=> (= v1_3x4 true)
    (and
      (= v1_3x1 false)
      (= v1_3x2 false)
      (= v1_3x3 false)
    )
  )
)
; Columns for v1_4x3
(assert
  (=> (= v1_4x3 true)
    (and
      (= v1_1x3 false)
      (= v1_2x3 false)
      (= v1_3x3 false)
    )
  )
)

; Row 4
(assert 
  (xor
    v1_4x1 v1_4x2 v1_4x3 v1_4x4
  )
)
; Column 4
(assert 
  (xor
    v1_1x4 v1_2x4 v1_3x4 v1_4x4
  )
)
; Rows, columns only have one instance of value 1
; Rows for v1_4x1
(assert
  (=> (= v1_4x1 true)
    (and
      (= v1_4x2 false)
      (= v1_4x3 false)
      (= v1_4x4 false)
    )
  )
)
; Columns for v1_1x4
(assert
  (=> (= v1_1x4 true)
    (and
      (= v1_2x4 false)
      (= v1_3x4 false)
      (= v1_4x4 false)
    )
  )
)

; Rows for v1_4x2
(assert
  (=> (= v1_4x2 true)
    (and
      (= v1_4x1 false)
      (= v1_4x3 false)
      (= v1_4x4 false)
    )
  )
)
; Columns for v1_2x4
(assert
  (=> (= v1_2x4 true)
    (and
      (= v1_1x4 false)
      (= v1_3x4 false)
      (= v1_4x4 false)
    )
  )
)

; Rows for v1_4x3
(assert
  (=> (= v1_4x3 true)
    (and
      (= v1_4x1 false)
      (= v1_4x2 false)
      (= v1_4x4 false)
    )
  )
)
; Columns for v1_3x4
(assert
  (=> (= v1_3x4 true)
    (and
      (= v1_1x4 false)
      (= v1_2x4 false)
      (= v1_4x4 false)
    )
  )
)

; Rows for v1_4x4
(assert
  (=> (= v1_4x4 true)
    (and
      (= v1_4x1 false)
      (= v1_4x2 false)
      (= v1_4x3 false)
    )
  )
)
; Columns for v1_4x4
(assert
  (=> (= v1_4x4 true)
    (and
      (= v1_1x4 false)
      (= v1_2x4 false)
      (= v1_3x4 false)
    )
  )
)

; Row 1
(assert 
  (xor
    v2_1x1 v2_1x2 v2_1x3 v2_1x4
  )
)
; Column 1
(assert 
  (xor
    v2_1x1 v2_2x1 v2_3x1 v2_4x1
  )
)
; Rows, columns only have one instance of value 2
; Rows for v2_1x1
(assert
  (=> (= v2_1x1 true)
    (and
      (= v2_1x2 false)
      (= v2_1x3 false)
      (= v2_1x4 false)
    )
  )
)
; Columns for v2_1x1
(assert
  (=> (= v2_1x1 true)
    (and
      (= v2_2x1 false)
      (= v2_3x1 false)
      (= v2_4x1 false)
    )
  )
)

; Rows for v2_1x2
(assert
  (=> (= v2_1x2 true)
    (and
      (= v2_1x1 false)
      (= v2_1x3 false)
      (= v2_1x4 false)
    )
  )
)
; Columns for v2_2x1
(assert
  (=> (= v2_2x1 true)
    (and
      (= v2_1x1 false)
      (= v2_3x1 false)
      (= v2_4x1 false)
    )
  )
)

; Rows for v2_1x3
(assert
  (=> (= v2_1x3 true)
    (and
      (= v2_1x1 false)
      (= v2_1x2 false)
      (= v2_1x4 false)
    )
  )
)
; Columns for v2_3x1
(assert
  (=> (= v2_3x1 true)
    (and
      (= v2_1x1 false)
      (= v2_2x1 false)
      (= v2_4x1 false)
    )
  )
)

; Rows for v2_1x4
(assert
  (=> (= v2_1x4 true)
    (and
      (= v2_1x1 false)
      (= v2_1x2 false)
      (= v2_1x3 false)
    )
  )
)
; Columns for v2_4x1
(assert
  (=> (= v2_4x1 true)
    (and
      (= v2_1x1 false)
      (= v2_2x1 false)
      (= v2_3x1 false)
    )
  )
)

; Row 2
(assert 
  (xor
    v2_2x1 v2_2x2 v2_2x3 v2_2x4
  )
)
; Column 2
(assert 
  (xor
    v2_1x2 v2_2x2 v2_3x2 v2_4x2
  )
)
; Rows, columns only have one instance of value 2
; Rows for v2_2x1
(assert
  (=> (= v2_2x1 true)
    (and
      (= v2_2x2 false)
      (= v2_2x3 false)
      (= v2_2x4 false)
    )
  )
)
; Columns for v2_1x2
(assert
  (=> (= v2_1x2 true)
    (and
      (= v2_2x2 false)
      (= v2_3x2 false)
      (= v2_4x2 false)
    )
  )
)

; Rows for v2_2x2
(assert
  (=> (= v2_2x2 true)
    (and
      (= v2_2x1 false)
      (= v2_2x3 false)
      (= v2_2x4 false)
    )
  )
)
; Columns for v2_2x2
(assert
  (=> (= v2_2x2 true)
    (and
      (= v2_1x2 false)
      (= v2_3x2 false)
      (= v2_4x2 false)
    )
  )
)

; Rows for v2_2x3
(assert
  (=> (= v2_2x3 true)
    (and
      (= v2_2x1 false)
      (= v2_2x2 false)
      (= v2_2x4 false)
    )
  )
)
; Columns for v2_3x2
(assert
  (=> (= v2_3x2 true)
    (and
      (= v2_1x2 false)
      (= v2_2x2 false)
      (= v2_4x2 false)
    )
  )
)

; Rows for v2_2x4
(assert
  (=> (= v2_2x4 true)
    (and
      (= v2_2x1 false)
      (= v2_2x2 false)
      (= v2_2x3 false)
    )
  )
)
; Columns for v2_4x2
(assert
  (=> (= v2_4x2 true)
    (and
      (= v2_1x2 false)
      (= v2_2x2 false)
      (= v2_3x2 false)
    )
  )
)

; Row 3
(assert 
  (xor
    v2_3x1 v2_3x2 v2_3x3 v2_3x4
  )
)
; Column 3
(assert 
  (xor
    v2_1x3 v2_2x3 v2_3x3 v2_4x3
  )
)
; Rows, columns only have one instance of value 2
; Rows for v2_3x1
(assert
  (=> (= v2_3x1 true)
    (and
      (= v2_3x2 false)
      (= v2_3x3 false)
      (= v2_3x4 false)
    )
  )
)
; Columns for v2_1x3
(assert
  (=> (= v2_1x3 true)
    (and
      (= v2_2x3 false)
      (= v2_3x3 false)
      (= v2_4x3 false)
    )
  )
)

; Rows for v2_3x2
(assert
  (=> (= v2_3x2 true)
    (and
      (= v2_3x1 false)
      (= v2_3x3 false)
      (= v2_3x4 false)
    )
  )
)
; Columns for v2_2x3
(assert
  (=> (= v2_2x3 true)
    (and
      (= v2_1x3 false)
      (= v2_3x3 false)
      (= v2_4x3 false)
    )
  )
)

; Rows for v2_3x3
(assert
  (=> (= v2_3x3 true)
    (and
      (= v2_3x1 false)
      (= v2_3x2 false)
      (= v2_3x4 false)
    )
  )
)
; Columns for v2_3x3
(assert
  (=> (= v2_3x3 true)
    (and
      (= v2_1x3 false)
      (= v2_2x3 false)
      (= v2_4x3 false)
    )
  )
)

; Rows for v2_3x4
(assert
  (=> (= v2_3x4 true)
    (and
      (= v2_3x1 false)
      (= v2_3x2 false)
      (= v2_3x3 false)
    )
  )
)
; Columns for v2_4x3
(assert
  (=> (= v2_4x3 true)
    (and
      (= v2_1x3 false)
      (= v2_2x3 false)
      (= v2_3x3 false)
    )
  )
)

; Row 4
(assert 
  (xor
    v2_4x1 v2_4x2 v2_4x3 v2_4x4
  )
)
; Column 4
(assert 
  (xor
    v2_1x4 v2_2x4 v2_3x4 v2_4x4
  )
)
; Rows, columns only have one instance of value 2
; Rows for v2_4x1
(assert
  (=> (= v2_4x1 true)
    (and
      (= v2_4x2 false)
      (= v2_4x3 false)
      (= v2_4x4 false)
    )
  )
)
; Columns for v2_1x4
(assert
  (=> (= v2_1x4 true)
    (and
      (= v2_2x4 false)
      (= v2_3x4 false)
      (= v2_4x4 false)
    )
  )
)

; Rows for v2_4x2
(assert
  (=> (= v2_4x2 true)
    (and
      (= v2_4x1 false)
      (= v2_4x3 false)
      (= v2_4x4 false)
    )
  )
)
; Columns for v2_2x4
(assert
  (=> (= v2_2x4 true)
    (and
      (= v2_1x4 false)
      (= v2_3x4 false)
      (= v2_4x4 false)
    )
  )
)

; Rows for v2_4x3
(assert
  (=> (= v2_4x3 true)
    (and
      (= v2_4x1 false)
      (= v2_4x2 false)
      (= v2_4x4 false)
    )
  )
)
; Columns for v2_3x4
(assert
  (=> (= v2_3x4 true)
    (and
      (= v2_1x4 false)
      (= v2_2x4 false)
      (= v2_4x4 false)
    )
  )
)

; Rows for v2_4x4
(assert
  (=> (= v2_4x4 true)
    (and
      (= v2_4x1 false)
      (= v2_4x2 false)
      (= v2_4x3 false)
    )
  )
)
; Columns for v2_4x4
(assert
  (=> (= v2_4x4 true)
    (and
      (= v2_1x4 false)
      (= v2_2x4 false)
      (= v2_3x4 false)
    )
  )
)

; Row 1
(assert 
  (xor
    v3_1x1 v3_1x2 v3_1x3 v3_1x4
  )
)
; Column 1
(assert 
  (xor
    v3_1x1 v3_2x1 v3_3x1 v3_4x1
  )
)
; Rows, columns only have one instance of value 3
; Rows for v3_1x1
(assert
  (=> (= v3_1x1 true)
    (and
      (= v3_1x2 false)
      (= v3_1x3 false)
      (= v3_1x4 false)
    )
  )
)
; Columns for v3_1x1
(assert
  (=> (= v3_1x1 true)
    (and
      (= v3_2x1 false)
      (= v3_3x1 false)
      (= v3_4x1 false)
    )
  )
)

; Rows for v3_1x2
(assert
  (=> (= v3_1x2 true)
    (and
      (= v3_1x1 false)
      (= v3_1x3 false)
      (= v3_1x4 false)
    )
  )
)
; Columns for v3_2x1
(assert
  (=> (= v3_2x1 true)
    (and
      (= v3_1x1 false)
      (= v3_3x1 false)
      (= v3_4x1 false)
    )
  )
)

; Rows for v3_1x3
(assert
  (=> (= v3_1x3 true)
    (and
      (= v3_1x1 false)
      (= v3_1x2 false)
      (= v3_1x4 false)
    )
  )
)
; Columns for v3_3x1
(assert
  (=> (= v3_3x1 true)
    (and
      (= v3_1x1 false)
      (= v3_2x1 false)
      (= v3_4x1 false)
    )
  )
)

; Rows for v3_1x4
(assert
  (=> (= v3_1x4 true)
    (and
      (= v3_1x1 false)
      (= v3_1x2 false)
      (= v3_1x3 false)
    )
  )
)
; Columns for v3_4x1
(assert
  (=> (= v3_4x1 true)
    (and
      (= v3_1x1 false)
      (= v3_2x1 false)
      (= v3_3x1 false)
    )
  )
)

; Row 2
(assert 
  (xor
    v3_2x1 v3_2x2 v3_2x3 v3_2x4
  )
)
; Column 2
(assert 
  (xor
    v3_1x2 v3_2x2 v3_3x2 v3_4x2
  )
)
; Rows, columns only have one instance of value 3
; Rows for v3_2x1
(assert
  (=> (= v3_2x1 true)
    (and
      (= v3_2x2 false)
      (= v3_2x3 false)
      (= v3_2x4 false)
    )
  )
)
; Columns for v3_1x2
(assert
  (=> (= v3_1x2 true)
    (and
      (= v3_2x2 false)
      (= v3_3x2 false)
      (= v3_4x2 false)
    )
  )
)

; Rows for v3_2x2
(assert
  (=> (= v3_2x2 true)
    (and
      (= v3_2x1 false)
      (= v3_2x3 false)
      (= v3_2x4 false)
    )
  )
)
; Columns for v3_2x2
(assert
  (=> (= v3_2x2 true)
    (and
      (= v3_1x2 false)
      (= v3_3x2 false)
      (= v3_4x2 false)
    )
  )
)

; Rows for v3_2x3
(assert
  (=> (= v3_2x3 true)
    (and
      (= v3_2x1 false)
      (= v3_2x2 false)
      (= v3_2x4 false)
    )
  )
)
; Columns for v3_3x2
(assert
  (=> (= v3_3x2 true)
    (and
      (= v3_1x2 false)
      (= v3_2x2 false)
      (= v3_4x2 false)
    )
  )
)

; Rows for v3_2x4
(assert
  (=> (= v3_2x4 true)
    (and
      (= v3_2x1 false)
      (= v3_2x2 false)
      (= v3_2x3 false)
    )
  )
)
; Columns for v3_4x2
(assert
  (=> (= v3_4x2 true)
    (and
      (= v3_1x2 false)
      (= v3_2x2 false)
      (= v3_3x2 false)
    )
  )
)

; Row 3
(assert 
  (xor
    v3_3x1 v3_3x2 v3_3x3 v3_3x4
  )
)
; Column 3
(assert 
  (xor
    v3_1x3 v3_2x3 v3_3x3 v3_4x3
  )
)
; Rows, columns only have one instance of value 3
; Rows for v3_3x1
(assert
  (=> (= v3_3x1 true)
    (and
      (= v3_3x2 false)
      (= v3_3x3 false)
      (= v3_3x4 false)
    )
  )
)
; Columns for v3_1x3
(assert
  (=> (= v3_1x3 true)
    (and
      (= v3_2x3 false)
      (= v3_3x3 false)
      (= v3_4x3 false)
    )
  )
)

; Rows for v3_3x2
(assert
  (=> (= v3_3x2 true)
    (and
      (= v3_3x1 false)
      (= v3_3x3 false)
      (= v3_3x4 false)
    )
  )
)
; Columns for v3_2x3
(assert
  (=> (= v3_2x3 true)
    (and
      (= v3_1x3 false)
      (= v3_3x3 false)
      (= v3_4x3 false)
    )
  )
)

; Rows for v3_3x3
(assert
  (=> (= v3_3x3 true)
    (and
      (= v3_3x1 false)
      (= v3_3x2 false)
      (= v3_3x4 false)
    )
  )
)
; Columns for v3_3x3
(assert
  (=> (= v3_3x3 true)
    (and
      (= v3_1x3 false)
      (= v3_2x3 false)
      (= v3_4x3 false)
    )
  )
)

; Rows for v3_3x4
(assert
  (=> (= v3_3x4 true)
    (and
      (= v3_3x1 false)
      (= v3_3x2 false)
      (= v3_3x3 false)
    )
  )
)
; Columns for v3_4x3
(assert
  (=> (= v3_4x3 true)
    (and
      (= v3_1x3 false)
      (= v3_2x3 false)
      (= v3_3x3 false)
    )
  )
)

; Row 4
(assert 
  (xor
    v3_4x1 v3_4x2 v3_4x3 v3_4x4
  )
)
; Column 4
(assert 
  (xor
    v3_1x4 v3_2x4 v3_3x4 v3_4x4
  )
)
; Rows, columns only have one instance of value 3
; Rows for v3_4x1
(assert
  (=> (= v3_4x1 true)
    (and
      (= v3_4x2 false)
      (= v3_4x3 false)
      (= v3_4x4 false)
    )
  )
)
; Columns for v3_1x4
(assert
  (=> (= v3_1x4 true)
    (and
      (= v3_2x4 false)
      (= v3_3x4 false)
      (= v3_4x4 false)
    )
  )
)

; Rows for v3_4x2
(assert
  (=> (= v3_4x2 true)
    (and
      (= v3_4x1 false)
      (= v3_4x3 false)
      (= v3_4x4 false)
    )
  )
)
; Columns for v3_2x4
(assert
  (=> (= v3_2x4 true)
    (and
      (= v3_1x4 false)
      (= v3_3x4 false)
      (= v3_4x4 false)
    )
  )
)

; Rows for v3_4x3
(assert
  (=> (= v3_4x3 true)
    (and
      (= v3_4x1 false)
      (= v3_4x2 false)
      (= v3_4x4 false)
    )
  )
)
; Columns for v3_3x4
(assert
  (=> (= v3_3x4 true)
    (and
      (= v3_1x4 false)
      (= v3_2x4 false)
      (= v3_4x4 false)
    )
  )
)

; Rows for v3_4x4
(assert
  (=> (= v3_4x4 true)
    (and
      (= v3_4x1 false)
      (= v3_4x2 false)
      (= v3_4x3 false)
    )
  )
)
; Columns for v3_4x4
(assert
  (=> (= v3_4x4 true)
    (and
      (= v3_1x4 false)
      (= v3_2x4 false)
      (= v3_3x4 false)
    )
  )
)

; Row 1
(assert 
  (xor
    v4_1x1 v4_1x2 v4_1x3 v4_1x4
  )
)
; Column 1
(assert 
  (xor
    v4_1x1 v4_2x1 v4_3x1 v4_4x1
  )
)
; Rows, columns only have one instance of value 4
; Rows for v4_1x1
(assert
  (=> (= v4_1x1 true)
    (and
      (= v4_1x2 false)
      (= v4_1x3 false)
      (= v4_1x4 false)
    )
  )
)
; Columns for v4_1x1
(assert
  (=> (= v4_1x1 true)
    (and
      (= v4_2x1 false)
      (= v4_3x1 false)
      (= v4_4x1 false)
    )
  )
)

; Rows for v4_1x2
(assert
  (=> (= v4_1x2 true)
    (and
      (= v4_1x1 false)
      (= v4_1x3 false)
      (= v4_1x4 false)
    )
  )
)
; Columns for v4_2x1
(assert
  (=> (= v4_2x1 true)
    (and
      (= v4_1x1 false)
      (= v4_3x1 false)
      (= v4_4x1 false)
    )
  )
)

; Rows for v4_1x3
(assert
  (=> (= v4_1x3 true)
    (and
      (= v4_1x1 false)
      (= v4_1x2 false)
      (= v4_1x4 false)
    )
  )
)
; Columns for v4_3x1
(assert
  (=> (= v4_3x1 true)
    (and
      (= v4_1x1 false)
      (= v4_2x1 false)
      (= v4_4x1 false)
    )
  )
)

; Rows for v4_1x4
(assert
  (=> (= v4_1x4 true)
    (and
      (= v4_1x1 false)
      (= v4_1x2 false)
      (= v4_1x3 false)
    )
  )
)
; Columns for v4_4x1
(assert
  (=> (= v4_4x1 true)
    (and
      (= v4_1x1 false)
      (= v4_2x1 false)
      (= v4_3x1 false)
    )
  )
)

; Row 2
(assert 
  (xor
    v4_2x1 v4_2x2 v4_2x3 v4_2x4
  )
)
; Column 2
(assert 
  (xor
    v4_1x2 v4_2x2 v4_3x2 v4_4x2
  )
)
; Rows, columns only have one instance of value 4
; Rows for v4_2x1
(assert
  (=> (= v4_2x1 true)
    (and
      (= v4_2x2 false)
      (= v4_2x3 false)
      (= v4_2x4 false)
    )
  )
)
; Columns for v4_1x2
(assert
  (=> (= v4_1x2 true)
    (and
      (= v4_2x2 false)
      (= v4_3x2 false)
      (= v4_4x2 false)
    )
  )
)

; Rows for v4_2x2
(assert
  (=> (= v4_2x2 true)
    (and
      (= v4_2x1 false)
      (= v4_2x3 false)
      (= v4_2x4 false)
    )
  )
)
; Columns for v4_2x2
(assert
  (=> (= v4_2x2 true)
    (and
      (= v4_1x2 false)
      (= v4_3x2 false)
      (= v4_4x2 false)
    )
  )
)

; Rows for v4_2x3
(assert
  (=> (= v4_2x3 true)
    (and
      (= v4_2x1 false)
      (= v4_2x2 false)
      (= v4_2x4 false)
    )
  )
)
; Columns for v4_3x2
(assert
  (=> (= v4_3x2 true)
    (and
      (= v4_1x2 false)
      (= v4_2x2 false)
      (= v4_4x2 false)
    )
  )
)

; Rows for v4_2x4
(assert
  (=> (= v4_2x4 true)
    (and
      (= v4_2x1 false)
      (= v4_2x2 false)
      (= v4_2x3 false)
    )
  )
)
; Columns for v4_4x2
(assert
  (=> (= v4_4x2 true)
    (and
      (= v4_1x2 false)
      (= v4_2x2 false)
      (= v4_3x2 false)
    )
  )
)

; Row 3
(assert 
  (xor
    v4_3x1 v4_3x2 v4_3x3 v4_3x4
  )
)
; Column 3
(assert 
  (xor
    v4_1x3 v4_2x3 v4_3x3 v4_4x3
  )
)
; Rows, columns only have one instance of value 4
; Rows for v4_3x1
(assert
  (=> (= v4_3x1 true)
    (and
      (= v4_3x2 false)
      (= v4_3x3 false)
      (= v4_3x4 false)
    )
  )
)
; Columns for v4_1x3
(assert
  (=> (= v4_1x3 true)
    (and
      (= v4_2x3 false)
      (= v4_3x3 false)
      (= v4_4x3 false)
    )
  )
)

; Rows for v4_3x2
(assert
  (=> (= v4_3x2 true)
    (and
      (= v4_3x1 false)
      (= v4_3x3 false)
      (= v4_3x4 false)
    )
  )
)
; Columns for v4_2x3
(assert
  (=> (= v4_2x3 true)
    (and
      (= v4_1x3 false)
      (= v4_3x3 false)
      (= v4_4x3 false)
    )
  )
)

; Rows for v4_3x3
(assert
  (=> (= v4_3x3 true)
    (and
      (= v4_3x1 false)
      (= v4_3x2 false)
      (= v4_3x4 false)
    )
  )
)
; Columns for v4_3x3
(assert
  (=> (= v4_3x3 true)
    (and
      (= v4_1x3 false)
      (= v4_2x3 false)
      (= v4_4x3 false)
    )
  )
)

; Rows for v4_3x4
(assert
  (=> (= v4_3x4 true)
    (and
      (= v4_3x1 false)
      (= v4_3x2 false)
      (= v4_3x3 false)
    )
  )
)
; Columns for v4_4x3
(assert
  (=> (= v4_4x3 true)
    (and
      (= v4_1x3 false)
      (= v4_2x3 false)
      (= v4_3x3 false)
    )
  )
)

; Row 4
(assert 
  (xor
    v4_4x1 v4_4x2 v4_4x3 v4_4x4
  )
)
; Column 4
(assert 
  (xor
    v4_1x4 v4_2x4 v4_3x4 v4_4x4
  )
)
; Rows, columns only have one instance of value 4
; Rows for v4_4x1
(assert
  (=> (= v4_4x1 true)
    (and
      (= v4_4x2 false)
      (= v4_4x3 false)
      (= v4_4x4 false)
    )
  )
)
; Columns for v4_1x4
(assert
  (=> (= v4_1x4 true)
    (and
      (= v4_2x4 false)
      (= v4_3x4 false)
      (= v4_4x4 false)
    )
  )
)

; Rows for v4_4x2
(assert
  (=> (= v4_4x2 true)
    (and
      (= v4_4x1 false)
      (= v4_4x3 false)
      (= v4_4x4 false)
    )
  )
)
; Columns for v4_2x4
(assert
  (=> (= v4_2x4 true)
    (and
      (= v4_1x4 false)
      (= v4_3x4 false)
      (= v4_4x4 false)
    )
  )
)

; Rows for v4_4x3
(assert
  (=> (= v4_4x3 true)
    (and
      (= v4_4x1 false)
      (= v4_4x2 false)
      (= v4_4x4 false)
    )
  )
)
; Columns for v4_3x4
(assert
  (=> (= v4_3x4 true)
    (and
      (= v4_1x4 false)
      (= v4_2x4 false)
      (= v4_4x4 false)
    )
  )
)

; Rows for v4_4x4
(assert
  (=> (= v4_4x4 true)
    (and
      (= v4_4x1 false)
      (= v4_4x2 false)
      (= v4_4x3 false)
    )
  )
)
; Columns for v4_4x4
(assert
  (=> (= v4_4x4 true)
    (and
      (= v4_1x4 false)
      (= v4_2x4 false)
      (= v4_3x4 false)
    )
  )
)


; Check if the sudoku board is possible to solve, and
; give the solution as a z3 model.
(check-sat)
(get-model)
